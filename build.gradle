plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.12.0'
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

ext {
    allureVersion = "2.29.0"
    aspectjVersion = "1.9.22.1"
    assertjVersion = "3.26.3"

    jacksonVersion = "2.17.2"
    junitVersion = "5.11.3"

    logbackVersion = "1.5.11"
    selenideVersion = "7.5.1"
    ownerVersion = "1.0.12"
    restAssuredVersion = "5.3.0"
    slf4jVersion = "2.0.16"
    lombokVersion = "1.18.34"
    fakerVersion = "1.0.2"
}


allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencies {
    implementation("ch.qos.logback:logback-core:${logbackVersion}")

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    runtimeOnly "org.aspectj:aspectjweaver:${aspectjVersion}"

    testImplementation(
            "org.slf4j:slf4j-api:${slf4jVersion}",
            "ch.qos.logback:logback-classic:${logbackVersion}",
            "org.projectlombok:lombok:${lombokVersion}",
            "com.github.javafaker:javafaker:${fakerVersion}",

            "commons-io:commons-io:2.11.0",
            "org.assertj:assertj-core:${assertjVersion}",

            "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
            "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
            "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}",
            "org.aspectj:aspectjweaver:${aspectjVersion}",
            "com.codeborne:selenide:${selenideVersion}",
            "io.qameta.allure:allure-java-commons:${allureVersion}",
            "io.qameta.allure:allure-selenide:${allureVersion}",

            "org.aeonbits.owner:owner:${ownerVersion}",
            "org.junit.jupiter:junit-jupiter-params:${junitVersion}",
            "org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}


tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
    systemProperty 'srv', 'local'
}

task runBasketTests(type: Test) {
    useJUnitPlatform {
        includeTags 'basket'
    }
    systemProperty 'srv', 'local'
}

task runCheckoutTests(type: Test) {
    useJUnitPlatform {
        includeTags 'checkout'
    }
    systemProperty 'srv', 'local'
}

task runWebTests(type: Test) {
    useJUnitPlatform {
        includeTags 'web'
    }
    systemProperty 'srv', 'local'
}

task runWebRemoteTests(type: Test) {
    useJUnitPlatform {
        includeTags 'web'
    }
    systemProperty 'srv', 'remote'
}

task runLoginTests(type: Test) {
    useJUnitPlatform {
        includeTags 'login'
    }
    systemProperty 'srv', 'local'
}