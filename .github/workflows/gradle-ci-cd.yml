name: CI/CD Gradle Pipeline

on:
  push:
    branches:
      - main
      - qa
      - preprod
      - prod

jobs:
  # Job for Preprod Environment
  run-auto-test-ppd:
    name: Preprod environment pipeline
    if: contains('refs/heads/staging,refs/heads/production', github.ref)
    runs-on: ubuntu-latest
    environment: ppd
    env:
      LT_USERNAME: ${{ secrets.LAMBDA_TEST_USERNAME }}
      LT_ACCESS_KEY: ${{ secrets.LAMBDA_TEST_ACCESS_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set executable permissions for gradlew
        run: chmod +x ./gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Clean allure results directory
        run: rm -rf ./build/allure-results/*

      - name: Run tests on PPD environment with `PPD testsuite`
        run: ./gradlew clean runPpdRemoteTests
        continue-on-error: true

      - name: Install Allure CLI
        run: |
          curl -sL https://github.com/allure-framework/allure2/releases/download/2.20.1/allure-2.20.1.tgz | tar -xz
          sudo mv allure-2.20.1 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure

      - name: Verify Allure CLI version
        run: allure --version

      - name:  Generate Allure Report for PPD environment test run
        run: |
          allure generate ./build/allure-results --clean -o ./build/allure-report

      - name: Upload Preprod environment Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-preprod
          path: ./build/allure-report

      - name: Deploy Preprod environment Allure Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/allure-report

  deploy-prod:
    name: Prod environment pipeline
    if: contains(['refs/heads/prod', 'refs/heads/preprod'], github.ref)
    runs-on: ubuntu-latest
    needs: [run-auto-test-ppd]
    environment: prod
    env:
      LT_USERNAME: ${{ secrets.LAMBDA_TEST_USERNAME }}
      LT_ACCESS_KEY: ${{ secrets.LAMBDA_TEST_ACCESS_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set executable permissions for gradlew
        run: chmod +x ./gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Clean allure results directory
        run: rm -rf ./build/allure-results/*

      - name: Run tests on Prod environment with `Prod testsuite`
        run: ./gradlew clean runProdRemoteTests
        continue-on-error: true

      - name: Install Allure CLI to prod
        run: |
          curl -sL https://github.com/allure-framework/allure2/releases/download/2.20.1/allure-2.20.1.tgz | tar -xz
          sudo mv allure-2.20.1 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure

      - name: Verify prod Allure CLI version
        run: allure --version

      - name: Generate Allure Report for Prod environment test run
        run: |
          allure generate ./build/allure-results --clean -o ./build/allure-report

      - name: Upload Prod environment Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-prod
          path: ./build/allure-report

      - name: Deploy Prod environment Allure Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/allure-report

      - name: Deploy to Production
        env:
          SERVER_URL: ${{ secrets.PROD_SERVER_URL }}
          USERNAME: ${{ secrets.PROD_USERNAME }}
          PASSWORD: ${{ secrets.PROD_PASSWORD }}
        run: |
          echo "Other commands for Deploying to Production environment!"